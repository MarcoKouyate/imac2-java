///////////////////////////////////////////////////////
MARCO KOUYATE
IMAC 2 - 2019 / 2020
JAVA - TP 03 - EXERCICE 02
///////////////////////////////////////////////////////

=======================================================
       var b1 = new Book("Da Java Code", "Duke Brown");
       var b2 = b1;
       var b3 = new Book("Da Java Code", "Duke Brown");

       System.out.println(b1 == b2);
       System.out.println(b1 == b3);
      
Qu'affiche le code ci-dessus ? 
--------------------------------------------------------
  
  Le code ce-dessous affiche :
  true
  false

========================================================
Pourquoi ?
--------------------------------------------------------

  b2 et b1 pointent vers le meme objet dans la mémoire. 
  Ils sont donc egaux au sens de == puisqu'un objet est 
  identique à lui-meme. 
  b3 est un autre objet créé dans la mémoire, et n'est donc
  pas egal à b1 au sens de == car meme si ils ont des valeurs 
  identiques il ne s'agit pas du même objet

========================================================
Écrire dans la classe Book une méthode (à vous de trouver 
le nom et la signature exacte de la méthode) qui renvoie 
true si deux livres ont les mêmes nom et description. 
Attention à la comparaison de chaînes de caractères.
--------------------------------------------------------

  J'ai redéfini le la méthode equals() afin qu'elle puisse
  comparer les champs de la classe Book :

            @Override public boolean equals(Object obj) {
          if (this == obj){
            return true;
          }

          if (obj==null){
            return false;
          }
   
          if (getClass() != obj.getClass()) {
              return false;
          }
          
          Book other = (Book) obj;
          return (this.title.equals(other.title) && this.author.equals(other.author));
        } 

=========================================================
La classe java.util.ArrayList correspond à un tableau qui 
s'agrandit dynamiquement. 
A quoi sert la méthode indexOf de ArrayList (RTFM) ?
--------------------------------------------------------

  Cette methode retourne la première occurence de l'objet
  passé en argument si celui-ci est contenu dans la liste

=========================================================
Exécutez le code suivant :
     public static void main(String[] args){
       var b1 = new Book("Da Java Code", "Duke Brown");
       var b2 = b1;
       var b3 = new Book("Da Java Code", "Duke Brown");

       var list = new ArrayList();
       list.add(b1);
       System.out.println(list.indexOf(b2));
       System.out.println(list.indexOf(b3));
     }

Quel est le problème avec les résultats affichés sur la console. 
Note : ici, le compilateur génère un warning au niveau du add. 
Nous verrons dans les prochains TD comment l'éviter.
----------------------------------------------------------

  La console affiche l'index 0 aussi bien pour le b2 que pour le b3.
  Cela voudrait dire que b3 n'a pas été ajouté dans la liste comme il
  le faudrait parce qu'il existerait déjà. Cela évite les duplications. 

==========================================================
Quelle méthode de Book est appelée par ArrayList.indexOf (RTFM again) ?
-----------------------------------------------------------

  ArrayList.indexOf appelle la methode equals() de Book. 

==========================================================
Modifier la classe Book pour que indexOf() fait sur 
l'ArrayList teste si les deux livres ont les mêmes 
caractéristiques.

Utiliser l'annotation @Override (java.lang.Override) sur la
méthode ajoutée à Book.
A quoi sert l'annotation @Override ?
----------------------------------------------------------

  Cette notation sert à s'assurer que la méthode associée 
  ne puisse fonctionner que si elle redéfinit une méthode
  déjà existente (par exemple une méthode héritée d'un parent)

==========================================================
Qu'affiche le code ci-dessous ?
       var aBook = new Book(null, null);
       var anotherBook = new Book(null, null);
       var list = new ArrayList();
       list.add(aBook);
       System.out.println(list.indexOf(anotherBook));
----------------------------------------------------------

  Le code affiche un NullPointer Exception

==========================================================    
Où se situe le problème ? 
----------------------------------------------------------
  
    Le code affiche un NullPointer Exception au niveau de 
    java.util.ArrayList.indexOf car celui-ci utilise, comme
    vu plus haut, la methode equals(). 
    Cette méthode ne sait pas comparer un champ string avec
    un champ null, ce qui explique la levée d'exception.

==========================================================
Rappeler pourquoi un code doit arrêter de fonctionner si 
celui-ci est mal utilisé par un développeur.
---------------------------------------------------------
    
    Un programme mal utilisé par un développeur, mais qui 
    fonctionne tout de même sur le moment, peut engendrer
    de sévères problèmes de performances, des effets 
    inattendus ou bien des erreurs beaucoup plus difficiles
    à repérer. Il est donc important de pousser le développeur
    à être rigoureux dés la phase de compilation pour ne pas
    provoquer de soucis pour les autres développeurs ou les
    clients. 

========================================================== 
Que doit-on faire pour corriger le problème ?
----------------------------------------------------------

    Une solution serait soit de lever une exception à la création
    d'objets avec des champs null. Eventuellement de prevoir
    un morceau de code qui convertisse les champs null par des
    valeurs par défaut. 

==========================================================
Rappeler quelle est la règle de bonne pratique concernant 
l'utilisation de null.
---------------------------------------------------------

  Il est plus simple de ne pas permettre d'insérer null
  plutôt que de tester si la valeur est null à chaque fois

==========================================================
A quoi sert la méthode java.util.Objects.requireNonNull (RTFM) ?
----------------------------------------------------------

  Cette méthode vérifie si la référence indiquée n'est pas null
  et affiche un NullPointerException personnalisé si c'est le cas.
  Cela empêche le développeur de laisser d'utiliser des references
  d'objet null lorsqu'il ne le faudrait pas. 

========================================================== 
Comment l'utiliser ici pour empêcher de construire un livre 
avec des champs null ?
----------------------------------------------------------

  Nous pourrions par exemple vérifier les arguments passés à l'intérieur
  du constructeur d'un Book pour s'assurer que les variables ne
  sont pas null

==========================================================